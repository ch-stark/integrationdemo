https://blog.openshift.com/cloud-native-ci-cd-with-openshift-pipelines/

An idea could be to translate the steps in jenkins see
https://access.redhat.com/documentation/en-us/reference_architectures/2017/pdf/application_cicd_on_openshift_container_platform_with_jenkins/Reference_Architectures-2017-Application_CICD_on_OpenShift_Container_Platform_with_Jenkins-en-US.pdf
to Tekton So it would be kind of native Tekton ci cd 





Tekton consists of the following parts

Tekton Operator
Tekton CLI
Tekton Catalog
Tekton Triggers
VS Code Tekton Pipelines extension 

ArgoCD is a tool to implement Gitops
ArgoCD contains an ArgoCD-Operator which will be used.

Kogito is a BPMN extension which works with Quarkus
Reseach:
https://porcelli.me/announcement/tooling/vscode/bpmn/2019/09/11/new-vscode-gui-editor.html
https://porcelli.me/announcement/tooling/github/bpmn/dmn/2019/10/22/bpmn-dmn-github-extension.html
https://developers.redhat.com/blog/2019/08/29/kogito-for-quarkus-intelligent-applications/

Deployment Structure: TBD


When use Gitops flow
When use BPM

For example a User does a Commit which triggers a tekton pipeline which deploys the Application to staging but
this is not enough.
When it comes to production a Kogito Process should be invoked which requires two Manual Approvals.


Scoping of the Topics TBD
All (apart ArgoCD has VSCode extensions)


Operators used:

Quarkus-Operator
https://github.com/quarkusio/quarkus/issues/5931
Tekton-Operator
(generated pipeline-sa)
ArgoCD-Operator
https://github.com/argoproj-labs/argocd-operator
Kogito-Operator
https://github.com/kiegroup/kogito-cloud-operator

Extensions discussed:










